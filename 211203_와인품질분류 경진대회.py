# -*- coding: utf-8 -*-
"""211203_(데이콘 공모전) 와인품질분류.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dkTLqO08efEScMdzm7LWiZVVcr5JaebW
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/Colab Notebooks/(dacon)와인품질분류'
!unzip "(dataset)와인품질분류.zip"

import pandas as pd

train = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/(dacon)와인품질분류/train.csv')
train

word_to_num = {'white':0,'red':1}

train['type'] = train['type'].replace(word_to_num)
train

x = train.drop(['id','quality'], axis =1)
y = train['quality']

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(solver = 'liblinear')
model.fit(x,y)

"""ctl + m + b : 셀 밑에 셀 추가

ctl + m + a : 셀 위에 셀 추가
"""

import numpy as np

def ACCURACY(true, pred):
  score = np.mean(true == pred)
  return score

prediction = model.predict(x)
score = ACCURACY(y, prediction)
print(f'모델의 정확도는 {score*100:.2f}% 입니다')

from collections import Counter

pred_cnt = Counter(prediction)
true_cnt = Counter(y)

for key in sorted(true_cnt.keys()):
  print(f'{key} 값 예측 개수 : {pred_cnt[key]}개, 실제 값 개수 : {true_cnt[key]}개')

import matplotlib.pyplot as plt

index = sorted(true_cnt.keys())
pred_val = [pred_cnt[key] for key in index]
true_val = [true_cnt[key] for key in index]

plt.figure(figsize=(15,10))
bar_width = 0.35

p1 = plt.bar([idx-bar_width/2 for idx in index], pred_val,
             bar_width,
             color = 'b',
             alpha= 0.5)
p2 = plt.bar([idx-bar_width/2 for idx in index], true_val,
             bar_width,
             color = 'r',
             alpha= 0.5)
plt.title('Prediction Analysis', fontsize = 20)
plt.ylabel('Value Counting', fontsize =18)
plt.xlabel('Quality', fontsize =18)
plt.xticks(index, fontsize=15)
plt.legend((p1[0], p2[0]), ('Predicion', 'True'), fontsize=15)
plt.show()

accurate = y[y==prediction]
print('정답을 맞춘 개수 : ', len(accurate))

accu_cnt = Counter(accurate)
true_cnt = Counter(y)

for key in sorted(true_cnt.keys()):
  print(f'{key} 값 예측 개수: {accu_cnt[key]}개, 실제 값 개수 : {true_cnt[key]}개, 정답률: {accu_cnt[key]/true_cnt[key]*100:.2f}%')

index = sorted(true_cnt.keys())
accu_val = [accu_cnt[key] for key in index]
true_val = [true_cnt[key] for key in index]

plt.figure(figsize=(15,10))
bar_width = 0.35
p1 = plt.bar([idx-bar_width/2 for idx in index], accu_val, 
             bar_width, 
             color='b', 
             alpha=0.5)
p2 = plt.bar([idx+bar_width/2 for idx in index], true_val, 
             bar_width, 
             color='r', 
             alpha=0.5)
plt.title('Prediction Analysis (with Only Correct Answer)', fontsize=20)
plt.ylabel('Value Counting', fontsize=18)
plt.xlabel('Quality', fontsize=18)
plt.xticks(index, fontsize=15)
plt.legend((p1[0], p2[0]), ('Prediction', 'True'), fontsize=15)
plt.show()

test = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/(dacon)와인품질분류/test.csv')
word_to_num = {'white':0,'red':1}

test['type'] = test['type'].replace(word_to_num)

prediction = model.predict(test.drop('id', axis=1))
prediction

submission = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/(dacon)와인품질분류/sample_submission.csv')
submission['quality'] = prediction
submission

submission.to_csv('/content/drive/MyDrive/Colab Notebooks/(dacon)와인품질분류/submission.csv')